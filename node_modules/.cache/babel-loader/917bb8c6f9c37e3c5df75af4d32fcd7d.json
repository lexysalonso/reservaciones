{"ast":null,"code":"import storage from \"./storage\";\nimport axios from \"axios\";\nimport useAxiosInstance from \"hooks/useAxiosInstance\";\nconst method = {\n  GET: \"GET\",\n  POST: \"POST\",\n  PUT: \"PUT\",\n  DEL: \"DELETE\"\n};\n\nconst requestAsync = async (method, endpoint, body) => {\n  let requestOptions = {\n    mode: \"cors\",\n    method: method,\n    headers: header(),\n    data: body ? JSON.stringify(body) : false\n  };\n  if (!requestOptions.data) delete requestOptions.data;\n  console.log(\"ver datarequests\", requestOptions);\n\n  try {\n    let result = await axios(process.env.REACT_APP_BACKEND + endpoint, requestOptions);\n    let data = await result.data;\n    return data;\n  } catch (err) {\n    let error = true;\n    let status = err.response.status || \"00\";\n    let statusText = err.response.statusText || \"ocurrio un error\";\n    return {\n      error,\n      status,\n      statusText\n    };\n  }\n};\n\nconst get = endpoint => requestAsync(method.GET, endpoint);\n\nconst post = (endpoint, body) => requestAsync(method.POST, endpoint, body);\n\nconst put = (endpoint, body) => requestAsync(method.PUT, endpoint, body);\n\nconst del = (endpoint, body) => requestAsync(method.DEL, endpoint, body);\n\nconst header = () => {\n  let token;\n  let data = storage.load(storage.Keys.auth);\n  console.log(\"ver token\", data);\n\n  if (data) {\n    token = data;\n  }\n\n  let header = {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\"\n  };\n\n  if (token) {\n    console.log(\"ver aqui token\", token);\n    Object.assign(header, {\n      Authorization: \"Bearer \" + token\n    });\n  }\n\n  console.log(\"ver headrszadas\", header);\n  return header;\n};\n/* const header = () => {\n  let options = {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    \n  };\n  let token = load(keys.auth);\n  if (token) {\n    let tokenhead = {\n      Autorization: \"Bearer \" + token,\n    };\n    const header = { ...options, ...tokenhead };\n    return header;\n  }\n}; */\n\n\nexport default {\n  get,\n  post,\n  put,\n  del\n};","map":{"version":3,"sources":["/media/lmdiaz/bd47588f-a8f9-4e55-b2d4-112c4f385fdf/Lexys/Programacion/proyecto/Reservaciones/Reservaciones-bootstrap/src/helpers/servicesAxios.js"],"names":["storage","axios","useAxiosInstance","method","GET","POST","PUT","DEL","requestAsync","endpoint","body","requestOptions","mode","headers","header","data","JSON","stringify","console","log","result","process","env","REACT_APP_BACKEND","err","error","status","response","statusText","get","post","put","del","token","load","Keys","auth","Accept","Object","assign","Authorization"],"mappings":"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","sourcesContent":["import storage from \"./storage\";\nimport axios from \"axios\";\nimport useAxiosInstance from \"hooks/useAxiosInstance\";\n\nconst method = {\n  GET: \"GET\",\n  POST: \"POST\",\n  PUT: \"PUT\",\n  DEL: \"DELETE\",\n};\n\n\n\nconst requestAsync = async (method, endpoint, body) => {\n  let requestOptions = {\n    mode: \"cors\",\n    method: method,\n    headers: header(),\n    data: body ? JSON.stringify(body) : false,\n  };\n  if (!requestOptions.data) delete requestOptions.data;\n  console.log(\"ver datarequests\", requestOptions);\n  try {\n    let result = await axios(\n      process.env.REACT_APP_BACKEND + endpoint,\n      requestOptions\n    );\n    \n    let data = await result.data;\n    return data;\n  } catch (err) {\n    let error = true;\n    let status = err.response.status || \"00\";\n    let statusText = err.response.statusText || \"ocurrio un error\";\n    return { error, status, statusText };\n  }\n};\n\n\nconst get = (endpoint) => requestAsync(method.GET, endpoint);\nconst post = (endpoint, body) => requestAsync(method.POST, endpoint, body);\nconst put = (endpoint, body) => requestAsync(method.PUT, endpoint, body);\nconst del = (endpoint, body) => requestAsync(method.DEL, endpoint, body);\n\nconst header = () => {\n  let token;\n  let data = storage.load(storage.Keys.auth);\n  console.log(\"ver token\",data)\n  if (data) {\n    token = data;\n  }\n  let header = {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n  };\n  if (token) {\n    console.log(\"ver aqui token\",token)\n    Object.assign(header, { Authorization: \"Bearer \" + token });\n  }\n  console.log(\"ver headrszadas\", header);\n  return header;\n};\n\n\n\n/* const header = () => {\n  let options = {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n    \n  };\n  let token = load(keys.auth);\n  if (token) {\n    let tokenhead = {\n      Autorization: \"Bearer \" + token,\n    };\n    const header = { ...options, ...tokenhead };\n    return header;\n  }\n}; */\nexport default { get, post, put, del };\n"]},"metadata":{},"sourceType":"module"}