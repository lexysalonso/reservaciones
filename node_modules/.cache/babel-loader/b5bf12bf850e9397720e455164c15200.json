{"ast":null,"code":"import axios from \"axios\";\nimport storage from \"helpers/storage\";\nimport dayjs from \"dayjs\";\nimport jwt_decode from \"jwt-decode\";\nconst instance = axios.create();\n\nconst useAxiosInstance = () => {\n  instance.interceptors.request.use(async resq => {\n    const token = storage.load(storage.Keys.auth) ? storage.load(storage.Keys.auth) : null;\n\n    if (token) {\n      let user = jwt_decode(token);\n      const isExpired = dayjs.unix(user.exp).diff(dayjs()) < 1;\n      if (!isExpired) return resq;\n      const token_refresh = storage.load(storage.Keys.refresh);\n      let options = {\n        url: \"/token/refresh/\",\n        method: \"POST\",\n        baseURL: process.env.REACT_APP_BACKEND,\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        data: {\n          refresh: token_refresh\n        }\n      };\n      let token_new = await axios(options);\n      let data = await token_new.data;\n      storage.save(storage.Keys.auth, data.access);\n      storage.save(storage.Keys.refresh, data.refresh);\n      resq.headers['Authorization'] = `Bearer ${data.access}`;\n      console.log(\"ver new token\", data);\n    }\n\n    return resq;\n  }, err => {\n    console.log(\"Error\", err);\n    return Promise.reject(err);\n  });\n  return instance;\n};\n\nexport default useAxiosInstance;","map":{"version":3,"sources":["/media/lmdiaz/bd47588f-a8f9-4e55-b2d4-112c4f385fdf/Lexys/Programacion/proyecto/Reservaciones/Reservaciones-bootstrap/src/hooks/useAxiosInstance.js"],"names":["axios","storage","dayjs","jwt_decode","instance","create","useAxiosInstance","interceptors","request","use","resq","token","load","Keys","auth","user","isExpired","unix","exp","diff","token_refresh","refresh","options","url","method","baseURL","process","env","REACT_APP_BACKEND","headers","data","token_new","save","access","console","log","err","Promise","reject"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,iBAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,MAAMC,QAAQ,GAAGJ,KAAK,CAACK,MAAN,EAAjB;;AAEA,MAAMC,gBAAgB,GAAG,MAAK;AAE1BF,EAAAA,QAAQ,CAACG,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACC,MAAOC,IAAP,IAAgB;AACZ,UAAMC,KAAK,GAAGV,OAAO,CAACW,IAAR,CAAaX,OAAO,CAACY,IAAR,CAAaC,IAA1B,IAAkCb,OAAO,CAACW,IAAR,CAAaX,OAAO,CAACY,IAAR,CAAaC,IAA1B,CAAlC,GAAmE,IAAjF;;AAEA,QAAIH,KAAJ,EAAU;AACN,UAAII,IAAI,GAAGZ,UAAU,CAACQ,KAAD,CAArB;AACA,YAAMK,SAAS,GAAGd,KAAK,CAACe,IAAN,CAAWF,IAAI,CAACG,GAAhB,EAAqBC,IAArB,CAA0BjB,KAAK,EAA/B,IAAqC,CAAvD;AACA,UAAI,CAACc,SAAL,EAAgB,OAAON,IAAP;AAEhB,YAAMU,aAAa,GAAGnB,OAAO,CAACW,IAAR,CAAaX,OAAO,CAACY,IAAR,CAAaQ,OAA1B,CAAtB;AAEA,UAAIC,OAAO,GAAG;AACZC,QAAAA,GAAG,EAAE,iBADO;AAEZC,QAAAA,MAAM,EAAE,MAFI;AAGZC,QAAAA,OAAO,EAAEC,OAAO,CAACC,GAAR,CAAYC,iBAHT;AAIZC,QAAAA,OAAO,EAAC;AACJ,0BAAe;AADX,SAJI;AAOZC,QAAAA,IAAI,EAAC;AACDT,UAAAA,OAAO,EAACD;AADP;AAPO,OAAd;AAWE,UAAIW,SAAS,GAAG,MAAM/B,KAAK,CAACsB,OAAD,CAA3B;AACA,UAAIQ,IAAI,GAAG,MAAMC,SAAS,CAACD,IAA3B;AACA7B,MAAAA,OAAO,CAAC+B,IAAR,CAAa/B,OAAO,CAACY,IAAR,CAAaC,IAA1B,EAA+BgB,IAAI,CAACG,MAApC;AACAhC,MAAAA,OAAO,CAAC+B,IAAR,CAAa/B,OAAO,CAACY,IAAR,CAAaQ,OAA1B,EAAkCS,IAAI,CAACT,OAAvC;AACAX,MAAAA,IAAI,CAACmB,OAAL,CAAa,eAAb,IAAiC,UAASC,IAAI,CAACG,MAAO,EAAtD;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA4BL,IAA5B;AAGL;;AACD,WAAOpB,IAAP;AACH,GAhCF,EAiCG0B,GAAD,IAAS;AACPF,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBC,GAApB;AACC,WAAQC,OAAO,CAACC,MAAR,CAAeF,GAAf,CAAR;AACF,GApCH;AAwCC,SAAOhC,QAAP;AAEJ,CA5CD;;AA8CA,eAAeE,gBAAf","sourcesContent":["import axios from \"axios\";\nimport storage from \"helpers/storage\";\nimport dayjs from \"dayjs\";\nimport jwt_decode from \"jwt-decode\";\nconst instance = axios.create();\n\nconst useAxiosInstance = () =>{\n     \n    instance.interceptors.request.use(\n     async (resq) => {\n         const token = storage.load(storage.Keys.auth) ? storage.load(storage.Keys.auth): null\n         \n         if (token){\n             let user = jwt_decode(token)\n             const isExpired = dayjs.unix(user.exp).diff(dayjs()) < 1;\n             if (!isExpired) return resq;\n\n             const token_refresh = storage.load(storage.Keys.refresh)\n\n             let options = {\n               url: \"/token/refresh/\",\n               method: \"POST\",\n               baseURL: process.env.REACT_APP_BACKEND,\n               headers:{\n                   \"Content-Type\":\"application/json\"\n               },\n               data:{\n                   refresh:token_refresh\n               }\n             };\n               let token_new = await axios(options)\n               let data = await token_new.data\n               storage.save(storage.Keys.auth,data.access)\n               storage.save(storage.Keys.refresh,data.refresh)\n               resq.headers['Authorization'] = `Bearer ${data.access}`\n               console.log(\"ver new token\",data)\n\n \n         }\n         return resq\n     },       \n      (err) => {\n        console.log(\"Error\",err);\n         return  Promise.reject(err);\n      }\n      \n    );\n    \n     return instance ;\n\n}\n\nexport default useAxiosInstance;"]},"metadata":{},"sourceType":"module"}