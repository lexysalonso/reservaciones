{"ast":null,"code":"import { keys, load } from \"./storage\";\nimport axios from \"axios\";\nconst method = {\n  GET: \"GET\",\n  POST: \"POST\",\n  PUT: \"PUT\",\n  DEL: \"DELETE\"\n};\n\nconst get = endpoint => requestAsync(method.GET, endpoint);\n\nconst post = (endpoint, body) => requestAsync(method.POST, endpoint, body);\n\nconst put = (endpoint, body) => requestAsync(method.PUT, endpoint, body);\n\nconst del = (endpoint, body) => requestAsync(method.DEL, endpoint, body);\n\nconst requestAsync = async (method, endpoint, body) => {\n  let requestOptions = {\n    header: header(),\n    body: body ? JSON.stringify(body) : false,\n    method: method\n  };\n  if (!body) delete requestOptions.body;\n  console.log(\"ver request\", requestOptions);\n  return fetch(endpoint, requestOptions).then(res => res.ok ? res.json() : Promise.reject({\n    err: true,\n    status: res.status || \"00\",\n    statusText: res.statusText || \"ocurrio un error\"\n  })).catch(err => err);\n};\n\nconst header = () => {\n  let options = {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\"\n  };\n  let token = load(keys.auth);\n\n  if (token) {\n    let tokenhead = {\n      Autorization: \"Bearer \" + token\n    };\n    const header = { ...options,\n      ...tokenhead\n    };\n    return header;\n  }\n};\n\nexport default {\n  get,\n  post,\n  put,\n  del\n};","map":{"version":3,"sources":["/media/lmdiaz/bd47588f-a8f9-4e55-b2d4-112c4f385fdf/Lexys/Programacion/proyecto/Reservaciones/Reservaciones-bootstrap/src/helpers/services.js"],"names":["keys","load","axios","method","GET","POST","PUT","DEL","get","endpoint","requestAsync","post","body","put","del","requestOptions","header","JSON","stringify","console","log","fetch","then","res","ok","json","Promise","reject","err","status","statusText","catch","options","Accept","token","auth","tokenhead","Autorization"],"mappings":"AAAA,SAASA,IAAT,EAAeC,IAAf,QAA2B,WAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,GAAG,EAAE,KADQ;AAEbC,EAAAA,IAAI,EAAE,MAFO;AAGbC,EAAAA,GAAG,EAAE,KAHQ;AAIbC,EAAAA,GAAG,EAAE;AAJQ,CAAf;;AAOA,MAAMC,GAAG,GAAIC,QAAD,IAAcC,YAAY,CAACP,MAAM,CAACC,GAAR,EAAaK,QAAb,CAAtC;;AACA,MAAME,IAAI,GAAG,CAACF,QAAD,EAAWG,IAAX,KAAoBF,YAAY,CAACP,MAAM,CAACE,IAAR,EAAcI,QAAd,EAAwBG,IAAxB,CAA7C;;AACA,MAAMC,GAAG,GAAG,CAACJ,QAAD,EAAWG,IAAX,KAAoBF,YAAY,CAACP,MAAM,CAACG,GAAR,EAAaG,QAAb,EAAuBG,IAAvB,CAA5C;;AACA,MAAME,GAAG,GAAG,CAACL,QAAD,EAAWG,IAAX,KAAoBF,YAAY,CAACP,MAAM,CAACI,GAAR,EAAaE,QAAb,EAAuBG,IAAvB,CAA5C;;AAEA,MAAMF,YAAY,GAAG,OAAOP,MAAP,EAAeM,QAAf,EAAyBG,IAAzB,KAAkC;AACrD,MAAIG,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAEA,MAAM,EADK;AAEnBJ,IAAAA,IAAI,EAAEA,IAAI,GAAGK,IAAI,CAACC,SAAL,CAAeN,IAAf,CAAH,GAA0B,KAFjB;AAGnBT,IAAAA,MAAM,EAAEA;AAHW,GAArB;AAKA,MAAI,CAACS,IAAL,EAAW,OAAOG,cAAc,CAACH,IAAtB;AAEXO,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0BL,cAA1B;AAEA,SAAOM,KAAK,CAACZ,QAAD,EAAWM,cAAX,CAAL,CAAgCO,IAAhC,CAAsCC,GAAD,IAC1CA,GAAG,CAACC,EAAJ,GACID,GAAG,CAACE,IAAJ,EADJ,GAEIC,OAAO,CAACC,MAAR,CAAe;AACbC,IAAAA,GAAG,EAAE,IADQ;AAEbC,IAAAA,MAAM,EAAEN,GAAG,CAACM,MAAJ,IAAc,IAFT;AAGbC,IAAAA,UAAU,EAAEP,GAAG,CAACO,UAAJ,IAAkB;AAHjB,GAAf,CAHC,EAQLC,KARK,CAQEH,GAAD,IAAOA,GARR,CAAP;AASD,CAnBD;;AAqBA,MAAMZ,MAAM,GAAG,MAAM;AACnB,MAAIgB,OAAO,GAAG;AACZ,oBAAgB,kBADJ;AAEZC,IAAAA,MAAM,EAAE;AAFI,GAAd;AAIA,MAAIC,KAAK,GAAGjC,IAAI,CAACD,IAAI,CAACmC,IAAN,CAAhB;;AACA,MAAID,KAAJ,EAAW;AACT,QAAIE,SAAS,GAAG;AACdC,MAAAA,YAAY,EAAE,YAAYH;AADZ,KAAhB;AAGA,UAAMlB,MAAM,GAAG,EAAE,GAAGgB,OAAL;AAAc,SAAGI;AAAjB,KAAf;AACA,WAAOpB,MAAP;AACD;AACF,CAbD;;AAcA,eAAe;AAAER,EAAAA,GAAF;AAAOG,EAAAA,IAAP;AAAaE,EAAAA,GAAb;AAAkBC,EAAAA;AAAlB,CAAf","sourcesContent":["import { keys, load } from \"./storage\";\nimport axios from \"axios\";\n\nconst method = {\n  GET: \"GET\",\n  POST: \"POST\",\n  PUT: \"PUT\",\n  DEL: \"DELETE\",\n};\n\nconst get = (endpoint) => requestAsync(method.GET, endpoint);\nconst post = (endpoint, body) => requestAsync(method.POST, endpoint, body);\nconst put = (endpoint, body) => requestAsync(method.PUT, endpoint, body);\nconst del = (endpoint, body) => requestAsync(method.DEL, endpoint, body);\n\nconst requestAsync = async (method, endpoint, body) => {\n  let requestOptions = {\n    header: header(),\n    body: body ? JSON.stringify(body) : false,\n    method: method,\n  };\n  if (!body) delete requestOptions.body;\n   \n  console.log(\"ver request\",requestOptions)\n\n  return fetch(endpoint, requestOptions).then((res) =>\n    res.ok\n      ? res.json()\n      : Promise.reject({\n          err: true,\n          status: res.status || \"00\",\n          statusText: res.statusText || \"ocurrio un error\",\n        })\n  ).catch((err)=>err);\n};\n\nconst header = () => {\n  let options = {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n  };\n  let token = load(keys.auth);\n  if (token) {\n    let tokenhead = {\n      Autorization: \"Bearer \" + token,\n    };\n    const header = { ...options, ...tokenhead };\n    return header;\n  }\n};\nexport default { get, post, put, del };\n"]},"metadata":{},"sourceType":"module"}