{"ast":null,"code":"import { keys, load } from \"./storage\";\nimport axios from \"axios\";\nconst method = {\n  GET: \"GET\",\n  POST: \"POST\",\n  PUT: \"PUT\",\n  DEL: \"DELETE\"\n};\n\nconst get = endpoint => requestAsync(method.GET, endpoint);\n\nconst post = (endpoint, body) => requestAsync(method.POST, endpoint, body);\n\nconst put = (endpoint, body) => requestAsync(method.PUT, endpoint, body);\n\nconst del = (endpoint, body) => requestAsync(method.DEL, endpoint, body);\n\nconst requestAsync = async (method, endpoint, body) => {\n  let requestOptions = {\n    header: header(),\n    method: method,\n    data: body ? JSON.stringify(body) : false\n  };\n  if (!requestdata) delete requestOptions.data;\n  console.log(\"ver request\", requestOptions);\n\n  try {\n    let result = await axios(process.env.REACT_APP_BACKEND + endpoint, requestOptions);\n    let data = await result.data;\n    return data;\n  } catch (err) {\n    let error = true;\n    let status = err.response.status || \"00\";\n    let statusText = err.response.statusText || \"ocurrio un error\";\n    return {\n      error,\n      status,\n      statusText\n    };\n  }\n};\n/*return fetch(process.env.REACT_APP_BACKEND + endpoint, requestOptions)\n    .then((res) =>\n      res.ok\n        ? res.json()\n        : Promise.reject({\n            err: true,\n            status: res.status || \"00\",\n            statusText: res.statusText || \"ocurrio un error\",\n          })\n    )\n    .catch((err) => err);*/\n\n\nconst header = () => {\n  let options = {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\"\n  };\n  let token = load(keys.auth);\n\n  if (token) {\n    let tokenhead = {\n      Autorization: \"Bearer \" + token\n    };\n    const header = { ...options,\n      ...tokenhead\n    };\n    return header;\n  }\n};\n\nexport default {\n  get,\n  post,\n  put,\n  del\n};","map":{"version":3,"sources":["/media/lmdiaz/bd47588f-a8f9-4e55-b2d4-112c4f385fdf/Lexys/Programacion/proyecto/Reservaciones/Reservaciones-bootstrap/src/helpers/servicesAxios.js"],"names":["keys","load","axios","method","GET","POST","PUT","DEL","get","endpoint","requestAsync","post","body","put","del","requestOptions","header","data","JSON","stringify","requestdata","console","log","result","process","env","REACT_APP_BACKEND","err","error","status","response","statusText","options","Accept","token","auth","tokenhead","Autorization"],"mappings":"AAAA,SAASA,IAAT,EAAeC,IAAf,QAA2B,WAA3B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,GAAG,EAAE,KADQ;AAEbC,EAAAA,IAAI,EAAE,MAFO;AAGbC,EAAAA,GAAG,EAAE,KAHQ;AAIbC,EAAAA,GAAG,EAAE;AAJQ,CAAf;;AAOA,MAAMC,GAAG,GAAIC,QAAD,IAAcC,YAAY,CAACP,MAAM,CAACC,GAAR,EAAaK,QAAb,CAAtC;;AACA,MAAME,IAAI,GAAG,CAACF,QAAD,EAAWG,IAAX,KAAoBF,YAAY,CAACP,MAAM,CAACE,IAAR,EAAcI,QAAd,EAAwBG,IAAxB,CAA7C;;AACA,MAAMC,GAAG,GAAG,CAACJ,QAAD,EAAWG,IAAX,KAAoBF,YAAY,CAACP,MAAM,CAACG,GAAR,EAAaG,QAAb,EAAuBG,IAAvB,CAA5C;;AACA,MAAME,GAAG,GAAG,CAACL,QAAD,EAAWG,IAAX,KAAoBF,YAAY,CAACP,MAAM,CAACI,GAAR,EAAaE,QAAb,EAAuBG,IAAvB,CAA5C;;AAEA,MAAMF,YAAY,GAAG,OAAOP,MAAP,EAAeM,QAAf,EAAyBG,IAAzB,KAAkC;AACrD,MAAIG,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAEA,MAAM,EADK;AAEnBb,IAAAA,MAAM,EAAEA,MAFW;AAGnBc,IAAAA,IAAI,EAAEL,IAAI,GAAGM,IAAI,CAACC,SAAL,CAAeP,IAAf,CAAH,GAA0B;AAHjB,GAArB;AAKA,MAAI,CAACQ,WAAL,EAAkB,OAAOL,cAAc,CAACE,IAAtB;AAElBI,EAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA2BP,cAA3B;;AAEA,MAAI;AACF,QAAIQ,MAAM,GAAG,MAAMrB,KAAK,CACtBsB,OAAO,CAACC,GAAR,CAAYC,iBAAZ,GAAgCjB,QADV,EAEtBM,cAFsB,CAAxB;AAIA,QAAIE,IAAI,GAAG,MAAMM,MAAM,CAACN,IAAxB;AACA,WAAOA,IAAP;AACD,GAPD,CAOE,OAAOU,GAAP,EAAY;AACZ,QAAIC,KAAK,GAAG,IAAZ;AACA,QAAIC,MAAM,GAAGF,GAAG,CAACG,QAAJ,CAAaD,MAAb,IAAuB,IAApC;AACA,QAAIE,UAAU,GAAGJ,GAAG,CAACG,QAAJ,CAAaC,UAAb,IAA2B,kBAA5C;AACA,WAAO;AAAEH,MAAAA,KAAF;AAASC,MAAAA,MAAT;AAAiBE,MAAAA;AAAjB,KAAP;AACD;AACF,CAvBD;AAyBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,MAAMf,MAAM,GAAG,MAAM;AACnB,MAAIgB,OAAO,GAAG;AACZ,oBAAgB,kBADJ;AAEZC,IAAAA,MAAM,EAAE;AAFI,GAAd;AAIA,MAAIC,KAAK,GAAGjC,IAAI,CAACD,IAAI,CAACmC,IAAN,CAAhB;;AACA,MAAID,KAAJ,EAAW;AACT,QAAIE,SAAS,GAAG;AACdC,MAAAA,YAAY,EAAE,YAAYH;AADZ,KAAhB;AAGA,UAAMlB,MAAM,GAAG,EAAE,GAAGgB,OAAL;AAAc,SAAGI;AAAjB,KAAf;AACA,WAAOpB,MAAP;AACD;AACF,CAbD;;AAcA,eAAe;AAAER,EAAAA,GAAF;AAAOG,EAAAA,IAAP;AAAaE,EAAAA,GAAb;AAAkBC,EAAAA;AAAlB,CAAf","sourcesContent":["import { keys, load } from \"./storage\";\nimport axios from \"axios\";\n\nconst method = {\n  GET: \"GET\",\n  POST: \"POST\",\n  PUT: \"PUT\",\n  DEL: \"DELETE\",\n};\n\nconst get = (endpoint) => requestAsync(method.GET, endpoint);\nconst post = (endpoint, body) => requestAsync(method.POST, endpoint, body);\nconst put = (endpoint, body) => requestAsync(method.PUT, endpoint, body);\nconst del = (endpoint, body) => requestAsync(method.DEL, endpoint, body);\n\nconst requestAsync = async (method, endpoint, body) => {\n  let requestOptions = {\n    header: header(),\n    method: method,\n    data: body ? JSON.stringify(body) : false,\n  };\n  if (!requestdata) delete requestOptions.data;\n\n  console.log(\"ver request\", requestOptions);\n\n  try {\n    let result = await axios(\n      process.env.REACT_APP_BACKEND + endpoint,\n      requestOptions\n    );\n    let data = await result.data;\n    return data;\n  } catch (err) {\n    let error = true;\n    let status = err.response.status || \"00\";\n    let statusText = err.response.statusText || \"ocurrio un error\";\n    return { error, status, statusText };\n  }\n};\n\n/*return fetch(process.env.REACT_APP_BACKEND + endpoint, requestOptions)\n    .then((res) =>\n      res.ok\n        ? res.json()\n        : Promise.reject({\n            err: true,\n            status: res.status || \"00\",\n            statusText: res.statusText || \"ocurrio un error\",\n          })\n    )\n    .catch((err) => err);*/\n\nconst header = () => {\n  let options = {\n    \"Content-Type\": \"application/json\",\n    Accept: \"application/json\",\n  };\n  let token = load(keys.auth);\n  if (token) {\n    let tokenhead = {\n      Autorization: \"Bearer \" + token,\n    };\n    const header = { ...options, ...tokenhead };\n    return header;\n  }\n};\nexport default { get, post, put, del };\n"]},"metadata":{},"sourceType":"module"}